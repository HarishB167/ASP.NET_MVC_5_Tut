ASP.NET MVC 5 : Part 3

Section 7 : Client-side Development

1. Calling an API using jQuery
- Adding delete link in Customers list
• In View/Customers/Index.cshtml
• Give table id = "customers"
• Add th of Delete
• Add td with button as :
<button data-customer-id="@customer.Id" class="btn-link js-delete">Delete</button>
• At bottom of file add :
@section scripts
{
    <script>
        $(document).ready(function () {
            $("#cusotmers .js-delete").on("click", function() {
                 var button = $(this);
                 if (confirm("Are you sure you want to delete this customer?")) {
                      $.ajax({
                            url: "/api/customers/" + button.attr("data-customer-id"),
                            method: "DELETE",
                            success: function () {
                                 button.parents("tr).remove();
                            }
                       });
                  }
            });
        });
    </script>
}


2. Bootbox Plug-in
- Replacing native js confirmation box with bootstrap dialog box
• Using library Bootbox (abstraction over bootstrap)

- Adding Bootbox to project
• In package manager console
• install-package bootbox -version:4.3.0

- Adding reference to Bootbox.js in bundle
• In App_Start/BundleConfig.cs
• In "~bundles/bootstrap", add "~/Scripts/bootbox.js"
• Minification happens on compilation of application release.

- In Views/Customers/Index.cshtml replace as :
bootbox.confirm("Are you sure you want to delete this customer?", function (result) {
    if (result) {
        ...delete ajax code here...
    }
});

3. Optimizing jQuery Code
- Each delete button has handler function in memory
$("#customers .js-delete").on(...);

- Only 1 function in memory - associating function to table and filtering it in function
$("#customers").on("click", ".js-delete", ...);


4. DataTables Plug-in
- Adding Pagination, Sorting and Filtering
- DataTables makes list of customers (json in memory) from Dom elements.

- Install DataTables as
• install-package jquery.datatables -version:1.10.11

- In App_Start/BundleConfig.cs
• Consolidate bundles combine jquery and bootstrap as :
1) In Views/Shared/_Layout.cshtml
consolidate jquery and bootstrap to "lib"
2) In BundleConfig.cs rename "jquery" to "lib".
3) And append scripts of bootstrap bundle to this "lib" bundle.
4) Remove bootstrap bundle.
• In lib bundle add DataTable scripts
1) "~/Scripts/datatables/jquery.datatables.js"
2) "~/Scripts/datatables/datatables.bootstrap.js"
• Add DataTable stylesheet to css bundle :
"~/Content/datatables/css/datatables.bootstrap.css"

- In jquery in Views/Customers/Index.cshtml
At beginning of ready function add
$("#customers").DataTable();

5. DataTables with Ajax Source
- Using api as source of data
• Add configuration object arg to DataTable()
• {
    ajax : {
        url: "/api/customers",
        dataSrc: "" // Specifying where data is nested in response.
    },
    columns: [
         { data: "name", // property of customer object
            render : function (data, type, customer) {
                return "<a href='/customers/edit/" + customer.id + "'>" + customer.name + "</a>"; }
          },
            { data: "name"},
            { data: "id", render: function(data) {
              return "<button class='btn-link js-delete' data-customer-id="
                   + data + ">Delete</button>"; }
          }
    ]
}
• Remove foreach block in table.
• Remove if else condition.
• In Index action of CustomersController
• Remove return of list of customers.
----------------------------------------------
Status - Section 7 - DataTables with Ajax source - completed




