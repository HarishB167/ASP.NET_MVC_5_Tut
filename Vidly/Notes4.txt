ASP.NET MVC 5 : Part 4

Section 10 : Building a Feature End-to-End Systematically

1. Understanding the Problem
- Ask questions for use case
• Add the ability to record rentals

- Approach : Frontend, Back-end
• Start from backend then go to front-end
• To avoid over engineering
• Focus on input/output of application

- Use Case : New Rental
- Input : Customer and Movies
- Output : No output

- Action : MVC Controller or API Controller

2. Create API
- create controller, api action and Dto

3. Domain Modelling
- Create associative model b/w Customer and Movie
- Rental : has properties - DateRented, DateReturned, Customer, Movie, Id
- Do code first migration

4. Building the Simplest API
- Implement happy path of CreateNewRentals action
- Get customer
- Get movies using Where and Contains method as : 
var movies = ....Where(m => newRental.MovieIds.Contains(m.Id))

5. Adding the Details - Update availability of movies
- Add property NumberAvailable to Movies
- Change action CreateNewRentals to decrement same
- In MoviesControllers in CreateMovie setting same.

6. Edge Cases
- Defensive : for public apis, lots of validation required.
- Optimistic : for private apis, used by frontend.
- Cases : 
• CustomerId is invalid
• No MovieIds
• One of more MovieIds are invalid
• One of more movies are not available
----------------------------------------------
Status - Section 10 - Edge cases - completed

