ASP.NET MVC 5 : Part 4

Section 10 : Building a Feature End-to-End Systematically

1. Understanding the Problem
- Ask questions for use case
• Add the ability to record rentals

- Approach : Frontend, Back-end
• Start from backend then go to front-end
• To avoid over engineering
• Focus on input/output of application

- Use Case : New Rental
- Input : Customer and Movies
- Output : No output

- Action : MVC Controller or API Controller

2. Create API
- create controller, api action and Dto

3. Domain Modelling
- Create associative model b/w Customer and Movie
- Rental : has properties - DateRented, DateReturned, Customer, Movie, Id
- Do code first migration

4. Building the Simplest API
- Implement happy path of CreateNewRentals action
- Get customer
- Get movies using Where and Contains method as : 
var movies = ....Where(m => newRental.MovieIds.Contains(m.Id))

5. Adding the Details - Update availability of movies
- Add property NumberAvailable to Movies
- Change action CreateNewRentals to decrement same
- In MoviesControllers in CreateMovie setting same.

6. Edge Cases
- Defensive : for public apis, lots of validation required.
- Optimistic : for private apis, used by frontend.
- Cases : 
• CustomerId is invalid
• No MovieIds
• One of more MovieIds are invalid
• One of more movies are not available
----------------------------------------------

7. Building the Front-end - Using AJAX
- Add mvc5 controller - RentalsController
- Add action New
- Create a view New.cshtml
- Title = New Rental Form
- Layout is set automatically from _ViewStart and can be removed.
- Add form without action using raw html
- Inside add input for Customer and Movies
• div.form-group>label+input[type='text'].form-control
- Add submit button.btn.btn-primary
- Add link to _NavBar.cshtml

8. Adding Auto-completion
- install Typeahead jquery plugin
• install-package Twitter.Typeahead

- In BundleConfig in bundels/lib add 
scripts/typeahead.bundle.js

- Getting css
• search typeahead .js
• go to examples page
• Copy css from page's source
from : .typehead {background-color} to .tt-suggestion p {...}
• Create typeahead.css in Content folder
• Paste there
• In BundleConfig add css bundle

- Using plugin
• in examples page > click Remote
• Copy javascript of input
• In New.cshtml of Rental add
@section scripts
{
<script>$(document).ready(function() { <Paste here> });</script>
}
• Rename bestPictures to customers
• datumTokenizer :
References function taking a datum and transforming to string tokens. Rename value to name.
• queryTokenizer : function transforms query into tokens
• prefetch key : provides data on initialization, preventing additional requests. Remove it.
• remote : change url to /api/customers?query=%QUERY
• In reference to textbox change 'remote .typhead' to 'customer'
• Assign this id 'customer' to textbox
• .typhead method :
firstarg : {minLength : 3, highlight : true }
secondarg : { name: 'customers', display: 'name', source: customers }
• On selection : .typeahead(...).on("typeahead:select", function (e, customer) { vm.customerId = customer.id;}),
also declare vm object before.

- Error of not rendering of movies autocomplete
• add limit:50 before name:'movies'


9. Updating the DOM
- Adding movie to list
• Add ul before button as : ul#movies.list-group
• In callback function : append li with movie name as
$("#movies").append("<li>" + movie.name + "</li>");

- Clear the movie text box : $("#movie").typeahead("val","");

- Store in view model : 
• Add movieIds empty array to vm
• Then add vm.movieIds.push(movie.id);

- For complex structure use frontend frameworks

10. Improving the Look and Feel
- Inline text boxes
• typeahead wraps input text box with another div as relative positioned.
• Create div around input text box with class tt-container
• In typeahead.css add class as
.tt-container { position:relative; }

- Movies list with bullet points
• In js code in <li> add class='list-group-item'

- Reducing width of list item
• Create div around ul as : div.row>div.col-md-4.col-sm-4

11. Filter the Records
- In Api/CustomersController
• add optional parameter to GetCustomers(string query = null)
• Check for query for null
• Apply filter using Where(c => c.Name.Contains(query))

- In Api/MoviesController
• Filter for name and availability.

12. Submitting the Form
- Clear records in Rentals table in database
- Add id newRental to form
- In js code handle submit event as
$("#newRental").submit(function (e) {
    e.preventDefault();
    $.ajax({
       url: "/api/newRentals",
       method: "post",
       data: vm
     }).done(function() {console.log("done");})
     .fail(function() {});
}

13. Displaying Toast Notifications
- Install toastr
- Add it to bundle config : /content/toastr.css and /scripts/toastr.js
- In post success : toastr.success("<msg>")
- In post fail : toastr.error("<msg>")

14. Implementing Client-side Validation
- In @section scripts at beginning add
• @Scripts.Render("~/bundles/jqueryval")

- Add required to customer input

- Custom validation :
• $("#newRental").validate({
    submitHandler : function() { code from submit function }
});
• Remove submit handler of form

- Making text and input red
• In site.css add
• label.error {color: red;}
• input.error {border: 2px solid red;}

- Enforcing customer selection from list
• Custom validator before validate method
• $.validator.addMethod("validCustomer", function() {
    return vm.customerId && vm.customerId !== 0;
}, "<error message>");
• Apply as : <input ... data-rule-validCustomer="true" ...

15. Code review
- Preventing form submit
• Remove e.preventDefault() from validate
• return false in submitHandler function

- Validation message issue
• Assign name attributes to input fields for customer and movie

- Clearing form on success in done() method
• $("#customer").typeahead("val","");
• $("#movie").typeahead("val","");
• $("#movies").empty();
• vm = { movieIds: [] };

- Reset form validation state
- Assign validate method result to validator
- In done method : validator.resetForm();

- Code refactoring is required in OOP design.


16. Summary
- Understand the problem
- Start with the backend
- Think of the inputs and the output
- Declare a simple API
- Extend the domain model (if required)
- Build the happy path
- Add the details one by one
- Move on to the front end

-----------------------------------------------------------

Section 11 : Deployment

1. Deploying the Application
- In solution explorer
• Right click > Publish
• Select Custom
• Give profile name
• Connection > File system
• Give Target Location
• Settings > Configuration > Release
• Click Publish

- Publish profile : settings set for servers

- Publish targets
• Microsoft Azure websites
• Import : Using existing publish profile
• Custom : Creating publish profile

- Connection : Publish method
• Web Deploy - Depending upon IIS with admin
• FTP, File system
----------------------------------------------
Status - Section 11 - Deploying the Application - completed

