ASP.NET MVC 5 : Part 2

Section 4 : Building Forms

1. The Markup
Add action to represent a form
In CustomerController add action named New.
Add it's view :
title and <h2> to New Customer
Render form :
.BeginForm returns Disposable object, so
using block makes </form> render on Dispose() call.
.LabelFor(<lambda expression>) - specifying model's property used.
.TextBoxFor - automatic supports validation from model, 2nd argument can be object to specify extra html properties.
@using (Html.BeginForm("targetAction", "ControllerName"))
{
    <div class="form-group">
          @Html.LabelFor(m => m.Name)
          @Html.TextBoxFor(m => m.Name, new { @class = "form-control" } )
    </div>
}

2. Form labels
Changing labels : 2 options :
1) Apply Data annotation in model as :
[Display(Name = "Date of  Birth")]
public DateTime? Birthdate {get; set;}
It requires recompiling at every change
2) Manually adding label as raw html
<label for="Birthdate">Date of Birth</label>
It requires adding for="" attribute to label
Change of model properties is not updated in 'for' attribute.

3. Drop-down Lists
- In application db context add DbSet for membership types.
public DbSet<MembershipType> MembershipTypes {get; set;}

- Create a ViewModel for this action having Membership types and Customer having property as NewCustomerViewModel
public IEnumerable<MembershipType> MembershipTypes {get; set;}
public Customer Customer {get; set;}

- In action method :
Getting membership types from database
var membershipTypes = _context.MembershipTypes.ToList();
Using view model :
var viewModel = new NewCustomerViewModel
{ MembershipTypes = membershipTypes
};

- In view .cshtml file
change @model ...NewCustomerViewModel
Add select form group
@Html.DropDownListFor(lambda function, 
new SelectList(list of items, value property, display property),
"Select membership type",
new {@class = "form-control"})

-  In Customer model
Using Data annotation set display value of MembershipTypeId to Membership Type.

4. Model Binding
- Add button to form
<button type="submit" class="btn btn-primary">Save</button>

- Create action
Apply [HttpPost] attribute - makes accept only Post request
Action modifying data should not accept get request.
Add parameter to action
public ActionResult Create(NewCustomerViewModel viewModel)
{
    return View();
}
Model binding - ASP.NET automatically binds request data to the model parameter
----------------------------------------------
Status - Section 4 - Model Binding - completed



